// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210728190039_table2")]
    partial class table2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("amount_paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("booking_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("cancel_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("check_in_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("check_out_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("effective_amount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("price_per_day*(DATEDIFF(day, check_in_date, check_out_date))*.8");

                    b.Property<bool>("is_refund")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("price_per_day")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("price_per_stay")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("price_per_day*(DATEDIFF(day, check_in_date, check_out_date))");

                    b.Property<int>("properity_id")
                        .HasColumnType("int");

                    b.Property<decimal>("refund_paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("site_fees")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("price_per_day*(DATEDIFF(day, check_in_date, check_out_date))*.15");

                    b.Property<decimal>("tax_paid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("price_per_day*(DATEDIFF(day, check_in_date, check_out_date))*.05");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("properity_id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("state_id_fk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("state_id_fk");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("icon_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Domain.Entities.country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("icon_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Entities.language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Domain.Entities.promo_codes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promo_Codes");
                });

            modelBuilder.Entity("Domain.Entities.property", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("accomodates_count")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("availability_tybe")
                        .HasColumnType("tinyint");

                    b.Property<int>("bathroom_count")
                        .HasColumnType("int");

                    b.Property<int>("bed_count")
                        .HasColumnType("int");

                    b.Property<int>("bedroom_count")
                        .HasColumnType("int");

                    b.Property<int?>("city_id")
                        .HasColumnType("int");

                    b.Property<int?>("country_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("currency_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("minimum_stay")
                        .HasColumnType("int");

                    b.Property<byte?>("minimum_stay_tybe")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("price_tybe")
                        .HasColumnType("tinyint");

                    b.Property<int?>("property_type_id")
                        .HasColumnType("int");

                    b.Property<byte?>("refund_tybe")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("state_id")
                        .HasColumnType("int");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("city_id");

                    b.HasIndex("country_id");

                    b.HasIndex("currency_id");

                    b.HasIndex("property_type_id");

                    b.HasIndex("state_id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.Entities.property_amenities", b =>
                {
                    b.Property<int?>("amenity_id")
                        .HasColumnType("int");

                    b.Property<int?>("property_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("icon_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("amenity_id", "property_id");

                    b.HasIndex("property_id");

                    b.ToTable("Property_Amenities");
                });

            modelBuilder.Entity("Domain.Entities.property_images", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("property_id")
                        .HasColumnType("int");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("property_id");

                    b.ToTable("Property_Images");
                });

            modelBuilder.Entity("Domain.Entities.property_reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("booking_id")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("moidfied")
                        .HasColumnType("datetime2");

                    b.Property<int?>("propertyid")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("booking_id");

                    b.HasIndex("propertyid");

                    b.ToTable("Property_Reviews");
                });

            modelBuilder.Entity("Domain.Entities.property_tybe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("icon_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.ToTable("Property_Tybes");
                });

            modelBuilder.Entity("Domain.Entities.state", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("country_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Entities.transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecevierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("booking_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("currency_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("discount_amt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("payeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("promo_code_id")
                        .HasColumnType("int");

                    b.Property<int?>("property_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("site_fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("trancfer_on")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RecevierId");

                    b.HasIndex("booking_id")
                        .IsUnique()
                        .HasFilter("[booking_id] IS NOT NULL");

                    b.HasIndex("currency_id");

                    b.HasIndex("payeeId");

                    b.HasIndex("promo_code_id");

                    b.HasIndex("property_id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.IdentityEntities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("login_with")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("moidfied")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("recive_coupon")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("status")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("user_type")
                        .HasColumnType("tinyint");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("applicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("applicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("applicationUserId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.property", "property")
                        .WithMany("Bookings")
                        .HasForeignKey("properity_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.state", "state")
                        .WithMany("Cities")
                        .HasForeignKey("state_id_fk")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("state");
                });

            modelBuilder.Entity("Domain.Entities.property", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("properties")
                        .HasForeignKey("city_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.country", "country")
                        .WithMany("properties")
                        .HasForeignKey("country_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.currency", "currency")
                        .WithMany("properties")
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.property_tybe", "property_tybe")
                        .WithMany("properties")
                        .HasForeignKey("property_type_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.state", "state")
                        .WithMany("properties")
                        .HasForeignKey("state_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("country");

                    b.Navigation("currency");

                    b.Navigation("property_tybe");

                    b.Navigation("state");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.property_amenities", b =>
                {
                    b.HasOne("Domain.Entities.amenity", "amenity")
                        .WithMany("property_amenities")
                        .HasForeignKey("amenity_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.property", "property")
                        .WithMany("property_amenities")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("amenity");

                    b.Navigation("property");
                });

            modelBuilder.Entity("Domain.Entities.property_images", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("property_images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.property", "property")
                        .WithMany("property_images")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.property_reviews", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("property_reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("property_reviews")
                        .HasForeignKey("booking_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.property", "property")
                        .WithMany("property_reviews")
                        .HasForeignKey("propertyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.state", b =>
                {
                    b.HasOne("Domain.Entities.country", "country")
                        .WithMany("states")
                        .HasForeignKey("country_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("country");
                });

            modelBuilder.Entity("Domain.Entities.transaction", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany("transactions")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "Recevier")
                        .WithMany()
                        .HasForeignKey("RecevierId");

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("transaction")
                        .HasForeignKey("Domain.Entities.transaction", "booking_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.currency", "currency")
                        .WithMany("transactions")
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "payee")
                        .WithMany()
                        .HasForeignKey("payeeId");

                    b.HasOne("Domain.Entities.promo_codes", "promo_codes")
                        .WithMany("transactions")
                        .HasForeignKey("promo_code_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.property", "property")
                        .WithMany("transactions")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("currency");

                    b.Navigation("payee");

                    b.Navigation("promo_codes");

                    b.Navigation("property");

                    b.Navigation("Recevier");
                });

            modelBuilder.Entity("Domain.IdentityEntities.Address", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "AppUser")
                        .WithOne("Address")
                        .HasForeignKey("Domain.IdentityEntities.Address", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("applicationRole");

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("property_reviews");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("Domain.Entities.amenity", b =>
                {
                    b.Navigation("property_amenities");
                });

            modelBuilder.Entity("Domain.Entities.country", b =>
                {
                    b.Navigation("properties");

                    b.Navigation("states");
                });

            modelBuilder.Entity("Domain.Entities.currency", b =>
                {
                    b.Navigation("properties");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Domain.Entities.promo_codes", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Domain.Entities.property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("property_amenities");

                    b.Navigation("property_images");

                    b.Navigation("property_reviews");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Domain.Entities.property_tybe", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("Domain.Entities.state", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("properties");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");

                    b.Navigation("properties");

                    b.Navigation("property_images");

                    b.Navigation("property_reviews");

                    b.Navigation("transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
